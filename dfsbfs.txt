# -*- coding: utf-8 -*-
"""
Created on Fri May 27 00:30:32 2022

@author: Wakchaure Ishwari Dnyaneshwar
"""

def switch():
    option = int(input("Which program do you want to implement:\n1. DFS \n2. BFS\n"))
    if option == 1:
        graph = {
        'A' : ['B','C'],
        'B' : ['D', 'E'],
        'C' : ['F'],
        'D' : [],
        'E' : [],
        'F' : []
        }
        visited = set() # Set to keep track of visited nodes of graph.
        def dfs(visited, graph, node): #function for dfs 
            if node not in visited:
                print (node)
                visited.add(node)
                for neighbour in graph[node]:
                    dfs(visited, graph, neighbour)
            # Driver Code
        print("Following is the Depth-First Search")
        dfs(visited, graph, 'A')
        
    elif(option==2):
        graph = {
        'A' : ['B','C'],
        'B' : ['D', 'E'],
        'C' : ['F'],
        'D' : [],
        'E' : [],
        'F' : []
        }
        visited = [] # List to keep track of visited nodes.
        queue = [] #Initialize a queue
        def bfs(visited, graph, node):
            visited.append(node)
            queue.append(node)
            while queue:
                s = queue.pop(0) 
                print (s, end = " ") 
                for neighbour in graph[s]:
                    if neighbour not in visited:
                        visited.append(neighbour)
                        queue.append(neighbour)
        # Driver Code
        print("Following is the Breadth-First Search")
        bfs(visited, graph, 'A') 
    else:
        print("Incorrect option")
switch()
ch=input("Do you want to continue again? y/n ")
if(ch=='y'):
    switch()
